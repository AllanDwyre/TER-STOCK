CREATE DATABASE IF NOT EXISTS hivestock;

USE hivestock;

# Supression de EMPLACEMENT
DROP TABLE IF EXISTS LIGNE_COMMANDE;
DROP TABLE IF EXISTS PRODUIT_VENDU;
DROP TABLE IF EXISTS LOT_VENDU;
DROP TABLE IF EXISTS PRODUIT_LIVRE;
DROP TABLE IF EXISTS VENTES_REALISES;

DROP TABLE IF EXISTS INVENTAIRE_PRODUIT;
DROP TABLE IF EXISTS INVENTAIRE_LOT;

DROP TABLE IF EXISTS COMMANDE_FOURNISSEUR;
DROP TABLE IF EXISTS COMMANDE_CLIENT;
DROP TABLE IF EXISTS VENTE;
DROP TABLE IF EXISTS LIVRAISON;

DROP TABLE IF EXISTS COMMANDE;

DROP TABLE IF EXISTS LOT_PRODUITS;
DROP TABLE IF EXISTS PRODUIT;

DROP TABLE IF EXISTS FOURNISSEUR;
DROP TABLE IF EXISTS FACTURE;
DROP TABLE IF EXISTS CLIENT;
DROP TABLE IF EXISTS EMPLOYE;

DROP TABLE IF EXISTS EMPLACEMENT;
DROP TABLE IF EXISTS CATEGORIE;
DROP TABLE IF EXISTS ADRESSE;


DROP TABLE IF EXISTS USERS;
CREATE TABLE USERS (
  USER_ID NUMERIC(15),
  USERNAME VARCHAR(255) NOT NULL,
  NAME_USER VARCHAR(255) NOT NULL,
  FIRST_NAME VARCHAR(255) NOT NULL,
  USER_MAIL NVARCHAR(255) NOT NULL,
  USER_PASS NVARCHAR(255) NOT NULL,
  USER_TEL NUMERIC(10) NOT NULL,
  USER_DATE_NAISS DATE,
  CONSTRAINT PK_ID PRIMARY KEY(USER_ID)
) ENGINE=InnoDB;

## Table des catégories des produits
CREATE TABLE IF NOT EXISTS CATEGORIE (
    CATEGORIE_ID NUMERIC(15),
    NOM_CATEGORIE VARCHAR(255),
    CONSTRAINT PK_CAT PRIMARY KEY (CATEGORIE_ID)
);

## Table des emplacements
CREATE TABLE IF NOT EXISTS EMPLACEMENT(
    EMPLACEMENT_ID NUMERIC(15),
    NOM_EMPLACEMENT VARCHAR(255),
    DESC_EMPLACEMENT VARCHAR(255), 
    CONSTRAINT PK_EMPLACEMENT PRIMARY KEY (EMPLACEMENT_ID)
)ENGINE=InnoDB;

## Table des adresses
CREATE TABLE IF NOT EXISTS ADRESSE(
    ADRESSE_ID NUMERIC(15),
    NUM_RUE INT,
    NOM_RUE VARCHAR(255),
    VILLE VARCHAR(255),
    CODE_POSTAL VARCHAR(255),
    CONSTRAINT PK_ADR PRIMARY KEY (ADRESSE_ID)
);

-- Table des employés
CREATE TABLE IF NOT EXISTS EMPLOYE (
    EMPLOYE_ID NUMERIC(15),
    POSTE VARCHAR(255),
    -- RELATIONS --
    ADRESSE_ID NUMERIC(15),
    CONSTRAINT PK_EMP PRIMARY KEY (EMPLOYE_ID),
    CONSTRAINT FK_EMP_USER FOREIGN KEY (EMPLOYE_ID) REFERENCES USERS(USER_ID),
    CONSTRAINT FK_ADR_EMP FOREIGN KEY (ADRESSE_ID) REFERENCES ADRESSE(ADRESSE_ID)
);

-- Table des clients
CREATE TABLE IF NOT EXISTS CLIENT (
    CLIENT_ID NUMERIC(15),
    NOM_CLI VARCHAR(255),
    PRENOM_CLI VARCHAR(255),
    FIDELITE BOOLEAN,
    -- RELATIONS --
    ADRESSE_ID NUMERIC(15),
    CONSTRAINT PK_CLIENT PRIMARY KEY (CLIENT_ID),
    CONSTRAINT FK_ADR_CLI FOREIGN KEY (ADRESSE_ID) REFERENCES ADRESSE(ADRESSE_ID)
    
)ENGINE = InnoDB;

-- Table des factures
CREATE TABLE IF NOT EXISTS FACTURE (
    FACTURE_ID NUMERIC(15),
    MONTANT DECIMAL(10, 2),
    DATE_FACTURE DATE,
    NOM_MAGASIN VARCHAR(255),
    -- RELATIONS --
    CLIENT_ID NUMERIC(15), -- Relation 1,1 -- 0,1 car client peut être anonyme 
    CONSTRAINT PK_FACTURE PRIMARY KEY (FACTURE_ID),
    CONSTRAINT FK_CLI FOREIGN KEY (CLIENT_ID) REFERENCES CLIENT(CLIENT_ID)
);    


-- Table des fournisseurs
CREATE TABLE IF NOT EXISTS FOURNISSEUR (
    FOURNISSEUR_ID NUMERIC(15),
    NOM_FOURNISSEUR VARCHAR(255),
    TELEPHONE VARCHAR(255),
    -- RELATIONS --
    ADRESSE_ID NUMERIC(15),
    CONSTRAINT PK_FOURNISSEUR PRIMARY KEY (FOURNISSEUR_ID),
    CONSTRAINT FK_ADR_FOURN FOREIGN KEY (ADRESSE_ID) REFERENCES ADRESSE(ADRESSE_ID)
   
)ENGINE = InnoDB;



-- Table des produits
CREATE TABLE IF NOT EXISTS PRODUIT (
    PRODUIT_ID NUMERIC(15),
    NOM VARCHAR(255),
    DESCR VARCHAR(255),
    PRIX_UNIT NUMERIC(5,2),
    POIDS VARCHAR(255),
    DIMENSIONS VARCHAR(255),
    MAGASIN_ENTREPOT VARCHAR(255),
    CODE_BARRE_PRODUIT NUMERIC(20), -- ASSOCIATION 1,1 -- 1,1 AVEC CODE BARRE
    
   -- QR_CODE_PRODUIT NUMERIC(20), -- ASSOCIATION 1,1 -- 1,1 AVEC QR CODE
    CATEGORIE_ID NUMERIC(15),
    EMPLACEMENT_ID NUMERIC(15),
    FOURNISSEUR_ID NUMERIC(15),
    CONSTRAINT PK_PRODUIT PRIMARY KEY(PRODUIT_ID),
    CONSTRAINT FK_CAT FOREIGN KEY (CATEGORIE_ID) REFERENCES CATEGORIE(CATEGORIE_ID),
    CONSTRAINT FK_EMP FOREIGN KEY (EMPLACEMENT_ID) REFERENCES EMPLACEMENT(EMPLACEMENT_ID),
    CONSTRAINT FK_FOURN FOREIGN KEY (FOURNISSEUR_ID) REFERENCES FOURNISSEUR(FOURNISSEUR_ID)
)ENGINE = InnoDB;

-- Table des lots de produits
CREATE TABLE IF NOT EXISTS LOT_PRODUITS (
    LOT_ID NUMERIC(15),
    QUANTITE NUMERIC(3),
    PRIX_LOT NUMERIC(5,2),
    CB_LOT NUMERIC(15),
    -- QR_LOT NUMERIC(15),
    CONSTRAINT PK_LOT PRIMARY KEY (LOT_ID),
    CONSTRAINT FK_LOT_PRODUITS FOREIGN KEY (LOT_ID) REFERENCES PRODUIT(PRODUIT_ID)
);

-- Table des commandes 
CREATE TABLE IF NOT EXISTS COMMANDE (
    COMMANDE_ID INT AUTO_INCREMENT,
    DATE_COMMANDE TIMESTAMP,
    -- RELATIONS --
    EMPLOYE_ID NUMERIC(15),
    CONSTRAINT PK_CE PRIMARY KEY (COMMANDE_ID),
    CONSTRAINT FK_CF_EMPLOYE FOREIGN KEY (EMPLOYE_ID) REFERENCES EMPLOYE(EMPLOYE_ID)
);

-- Table des commandes d'un fournisseur
CREATE TABLE IF NOT EXISTS COMMANDE_FOURNISSEUR (
    COMM_FOURN_ID INT,
    TYPE_COMMANDE ENUM('commande', 'retour') NOT NULL,
    -- RELATIONS --
    FOURNISSEUR_ID NUMERIC(15),
    CONSTRAINT PK_COMM_FOURN PRIMARY KEY (COMM_FOURN_ID),
    CONSTRAINT FK_COMM FOREIGN KEY (COMM_FOURN_ID) REFERENCES COMMANDE(COMMANDE_ID),
    CONSTRAINT FL_CF_FOURNISSEUR FOREIGN KEY (FOURNISSEUR_ID) REFERENCES FOURNISSEUR(FOURNISSEUR_ID)
    
);

-- Table des commandes d'un client
CREATE TABLE IF NOT EXISTS COMMANDE_CLIENT (
    COMM_CLIENT_ID INT,
    TYPE_COMMANDE ENUM('commande', 'retour') NOT NULL,
    -- RELATIONS --
    CLIENT_ID NUMERIC(15),
    CONSTRAINT PK_COMM_CLIENT PRIMARY KEY (COMM_CLIENT_ID),
    CONSTRAINT FK_COMM_CLIENT FOREIGN KEY (COMM_CLIENT_ID) REFERENCES COMMANDE(COMMANDE_ID),
    CONSTRAINT FL_CC_CLIENT FOREIGN KEY (CLIENT_ID) REFERENCES CLIENT(CLIENT_ID)
    
);


-- Table des ventes
CREATE TABLE IF NOT EXISTS VENTE (
    VENTE_ID NUMERIC(15),
    DATE_VENTE DATE,     
    -- RELATIONS --
    EMPLOYE_ID NUMERIC(15),
    FACTURE_ID NUMERIC(15), -- Relation 1,1 -- 0,1 car vente peut ne pas exister dnc pas de facture. 
    CONSTRAINT PK_VENTE PRIMARY KEY (VENTE_ID),
    CONSTRAINT FK_EMPV FOREIGN KEY (EMPLOYE_ID) REFERENCES EMPLOYE(EMPLOYE_ID),
    CONSTRAINT FK_FAC FOREIGN KEY (FACTURE_ID) REFERENCES FACTURE(FACTURE_ID)
);

## LIVRAISON d un PRODUIT (propre au mode Entrepot) 
-- Table des livraisons
CREATE TABLE IF NOT EXISTS LIVRAISON (
    LIVRAISON_ID NUMERIC(15),
    DATE_LIVRAISON DATE,
    -- RELATIONS --
    EMPLOYE_ID NUMERIC(15),
    CONSTRAINT PK_LIV PRIMARY KEY (LIVRAISON_ID),
    CONSTRAINT FK_EMPL FOREIGN KEY (EMPLOYE_ID) REFERENCES EMPLOYE(EMPLOYE_ID)
);

-- Table de l'INVENTAIRE réalisé par un EMPLOYE
-- Relation entre EMPLOYE et PRODUIT
CREATE TABLE IF NOT EXISTS INVENTAIRE_PRODUIT(
	INVENTAIRE_ID NUMERIC(15),
    EMPLOYE_ID NUMERIC(15),
    PRODUIT_ID NUMERIC(15),
    QUANTITE_OBSERVEE INT,
    DATE_INV TIMESTAMP,
    CONSTRAINT PK_INV PRIMARY KEY (INVENTAIRE_ID),
    CONSTRAINT FK_EMP_INV FOREIGN KEY (EMPLOYE_ID) REFERENCES EMPLOYE(EMPLOYE_ID),
    CONSTRAINT FK_PROD_INV FOREIGN KEY (PRODUIT_ID) REFERENCES PRODUIT(PRODUIT_ID)
    
)ENGINE = INNODB;


### RELATIONS MAILLÉES ###

CREATE TABLE IF NOT EXISTS LIGNE_COMMANDE(
    PRODUIT_ID NUMERIC(15),
    COMMANDE_ID INT,
    QUANTITE INT,
    CONSTRAINT PK_PLIGNE PRIMARY KEY (PRODUIT_ID, COMMANDE_ID),
    CONSTRAINT FK_LIGN_PROD FOREIGN KEY (PRODUIT_ID) REFERENCES PRODUIT(PRODUIT_ID),
    CONSTRAINT FK_LIGN_COMM FOREIGN KEY (COMMANDE_ID) REFERENCES COMMANDE(COMMANDE_ID)
);
    
    

-- Table des produits vendus
-- Relation entre PRODUIT et VENTE
CREATE TABLE IF NOT EXISTS PRODUIT_VENDU (
    PRODUIT_ID NUMERIC(15),
    VENTE_ID NUMERIC(15),
    QUANTITE NUMERIC(10),
    CONSTRAINT PK_PV PRIMARY KEY (PRODUIT_ID, VENTE_ID),
    CONSTRAINT FK_PRV FOREIGN KEY (PRODUIT_ID) REFERENCES PRODUIT(PRODUIT_ID),
    CONSTRAINT FK_VENPR FOREIGN KEY (VENTE_ID) REFERENCES VENTE(VENTE_ID)
);

-- Relation entre LOT et VENTE
CREATE TABLE IF NOT EXISTS LOT_VENDU (
    LOT_ID NUMERIC(15),
    VENTE_ID NUMERIC(15),
    QTE_LOT NUMERIC(10),
    CONSTRAINT PK_PV PRIMARY KEY (LOT_ID, VENTE_ID),
    CONSTRAINT FK_LOT FOREIGN KEY (LOT_ID) REFERENCES LOT_PRODUITS(LOT_ID),
    CONSTRAINT FK_VENT_LOT FOREIGN KEY (VENTE_ID) REFERENCES VENTE(VENTE_ID)
);

-- Relation entre PRODUIT et LIVRAISON
CREATE TABLE IF NOT EXISTS PRODUIT_LIVRE (
    PRODUIT_ID NUMERIC(15),
    LIVRAISON_ID NUMERIC(15),
    CONSTRAINT PK_PL PRIMARY KEY (PRODUIT_ID, LIVRAISON_ID),
    CONSTRAINT FK_PRL FOREIGN KEY (PRODUIT_ID) REFERENCES PRODUIT(PRODUIT_ID),
    CONSTRAINT FK_LIVPR FOREIGN KEY (LIVRAISON_ID) REFERENCES LIVRAISON(LIVRAISON_ID)
);

-- Relation entre EMPLOYE et VENTE --
CREATE TABLE IF NOT EXISTS VENTES_REALISES(
    EMPLOYE_ID NUMERIC(15),
    VENTE_ID NUMERIC(15),
    FACTURE_DEMANDE BOOLEAN,
    CONSTRAINT PK_PV PRIMARY KEY (EMPLOYE_ID, VENTE_ID),
    CONSTRAINT FK_EMPLOYE_VENTE FOREIGN KEY (EMPLOYE_ID) REFERENCES EMPLOYE(EMPLOYE_ID),
    CONSTRAINT FK_VENTE_EMP FOREIGN KEY (VENTE_ID) REFERENCES VENTE(VENTE_ID)
) ENGINE = InnoDB;


### FIN RELATIONS MAILLÉES ###

##INSERT INTO PRODUIT (PRODUIT_ID, NOM, DESCR, PRIX_UNIT, POIDS, DIMENSIONS, MAGASIN_ENTREPOT, EMPLACEMENT_ID, CB_ID, QR_ID) 
##VALUES (2944385, 'eponge', 'Eponge efficace', 1.5, 50, '10x7cm', 'Magasin', 98, 1, 2);
#SELECT * FROM PRODUIT;
#describe PRODUIT;
#DELETE FROM `PRODUIT` WHERE `PRODUIT_ID` = 12345;


INSERT INTO CATEGORIE VALUES(1, "beaute");
INSERT INTO ADRESSE VALUES(1, 280, "Rue des petits coeurs", "Montpellier", 34080);
INSERT INTO FOURNISSEUR VALUES(2, "Sephora", 0683849504, 1);


#DELETE FROM `CATEGORIE` WHERE `CATEGORIE_ID` = 5;
##SELECT ADRESSE_ID FROM ADRESSE;
